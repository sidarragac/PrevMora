[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.pylint]
max-line-length = 88
# Enable additional checks for better code quality
enable = [
    "C",    # Convention
    "R",    # Refactor
    "W",    # Warning
    "E",    # Error
    "F",    # Fatal
]
disable = [
    "C0114",  # missing-module-docstring (temporarily disabled)
    "C0115",  # missing-class-docstring (temporarily disabled)
    "C0116",  # missing-function-docstring (temporarily disabled)
    "R0903",  # too-few-public-methods (common in models)
    "R0801",  # duplicate-code (common in similar endpoints)
]
# Minimum score to pass (0-10 scale)
fail-under = 8.0

[tool.pylint.NAMING]
# Naming conventions aligned with PEP 8 - ENFORCED
module-naming-style = "snake_case"
class-naming-style = "PascalCase"
function-naming-style = "snake_case"
method-naming-style = "snake_case"
attr-naming-style = "snake_case"
argument-naming-style = "snake_case"
variable-naming-style = "snake_case"
const-naming-style = "UPPER_CASE"
class-const-naming-style = "UPPER_CASE"
# Regex patterns for validation
module-rgx = "^[a-z_][a-z0-9_]*$"
class-rgx = "^[A-Z][a-zA-Z0-9]*$"
function-rgx = "^[a-z_][a-z0-9_]*$"
method-rgx = "^[a-z_][a-z0-9_]*$"
attr-rgx = "^[a-z_][a-z0-9_]*$"
argument-rgx = "^[a-z_][a-z0-9_]*$"
variable-rgx = "^[a-z_][a-z0-9_]*$"
const-rgx = "^[A-Z_][A-Z0-9_]*$"

[tool.pylint.DESIGN]
# Complexity thresholds
max-args = 6
max-locals = 15
max-returns = 6
max-branches = 12
max-statements = 50
max-parents = 5
max-attributes = 10
max-public-methods = 20

[tool.pylint.FORMAT]
max-line-length = 88
max-module-lines = 1000

[tool.pylint.IMPORTS]
# Import organization
deprecated-modules = ["optparse", "imp"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]

# === STATIC ANALYSIS TOOLS ===

[tool.bandit]
# Security vulnerability scanner
exclude_dirs = ["tests", "venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_other
severity = "medium"

[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
    "os.execl",
    "os.execle", 
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
    "os.spawnlp",
    "os.spawnlpe",
    "os.spawnv",
    "os.spawnve",
    "os.spawnvp",
    "os.spawnvpe",
    "os.startfile"
]

[tool.flake8]
max-line-length = 88
max-complexity = 10
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "build",
    "dist",
    "*.egg-info"
]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "W504",  # line break after binary operator
]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "C90",   # mccabe complexity
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "test_*.py:E501,F401,F403",  # line too long, unused imports
]

[tool.pydocstyle]
# Docstring conventions checker
inherit = false
convention = "google"
match = "(?!test_).*\.py"
match-dir = "(?!tests|venv|migrations).*"
ignore = [
    "D100",  # Missing docstring in public module (optional)
    "D104",  # Missing docstring in public package (optional)
    "D107",  # Missing docstring in __init__ (optional)
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
]

[tool.vulture]
# Dead code finder
exclude = ["venv/", "tests/"]
ignore_decorators = ["@app.route", "@router.get", "@router.post", "@router.put", "@router.delete"]
ignore_names = ["__init__", "setUp", "tearDown"]
min_confidence = 60
sort_by_size = true

[tool.interrogate]
# Docstring coverage checker
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["setup.py", "docs", "build", "venv", "tests"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

[tool.safety]
# Dependency vulnerability checker
full_report = true
json = false
bare = false
cache = false
stdin = false
policy_file = ""
audit_and_monitor = false
