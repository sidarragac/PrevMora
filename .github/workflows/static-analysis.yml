# GitHub Actions workflow for Static Analysis - PrevMora
# This workflow runs comprehensive static analysis on every push and pull request

name: üîç Static Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  # Allow manual triggering
  workflow_dispatch:

# Cancel in-progress runs for same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # === BACKEND STATIC ANALYSIS ===
  backend-analysis:
    name: üêç Backend Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: üì¶ Install dependencies
      working-directory: ./backend/credit_management
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: üé® Check code formatting with Black
      working-directory: ./backend/credit_management
      run: |
        black --check --diff app/ scripts/

    - name: üìë Check import sorting with isort
      working-directory: ./backend/credit_management
      run: |
        isort --check-only --diff app/ scripts/

    - name: üîç Lint with Flake8
      working-directory: ./backend/credit_management
      run: |
        flake8 app/ scripts/

    - name: üßπ Lint with Pylint
      working-directory: ./backend/credit_management
      run: |
        pylint app/ scripts/ --fail-under=8.0

    - name: üè∑Ô∏è Type check with MyPy
      working-directory: ./backend/credit_management
      run: |
        mypy app/

    - name: üîí Security scan with Bandit
      working-directory: ./backend/credit_management
      run: |
        bandit -r app/ -f json -o bandit-report.json
        bandit -r app/

    - name: üìö Check docstrings with pydocstyle
      working-directory: ./backend/credit_management
      run: |
        pydocstyle app/ --convention=google

    - name: üßü Find dead code with Vulture
      working-directory: ./backend/credit_management
      run: |
        vulture app/ --min-confidence 60

    - name: üß™ Run tests
      working-directory: ./backend/credit_management
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=term

    - name: üõ°Ô∏è Check dependencies for vulnerabilities
      working-directory: ./backend/credit_management
      run: |
        safety check -r requirements.txt

    - name: üìä Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/credit_management/coverage.xml
        flags: backend
        name: backend-coverage

    - name: üìã Upload Bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: ./backend/credit_management/bandit-report.json

  # === FRONTEND STATIC ANALYSIS ===
  frontend-analysis:
    name: üåê Frontend Analysis
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üü¢ Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json

    - name: üì¶ Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: üè∑Ô∏è Type check with TypeScript
      working-directory: ./frontend
      run: npm run type-check

    - name: üîç Lint with ESLint
      working-directory: ./frontend
      run: npm run lint:strict

    - name: üé® Check formatting with Prettier
      working-directory: ./frontend
      run: npm run format:check

    - name: üèóÔ∏è Build check
      working-directory: ./frontend
      run: npm run build

    - name: üîí Security audit
      working-directory: ./frontend
      run: npm audit --audit-level high

    - name: üì¶ Check for outdated dependencies
      working-directory: ./frontend
      run: npm outdated || true

  # === SECURITY ANALYSIS ===
  security-analysis:
    name: üõ°Ô∏è Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîç Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: üìä Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: üîê Detect secrets
      uses: Yelp/detect-secrets-action@master
      with:
        args: '--scan --all-files --force-use-all-plugins'

  # === CODE QUALITY METRICS ===
  code-quality:
    name: üìà Code Quality Metrics
    runs-on: ubuntu-latest
    needs: [backend-analysis, frontend-analysis]

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for SonarCloud

    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: üü¢ Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: üì¶ Install Python dependencies
      working-directory: ./backend/credit_management
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: üì¶ Install Node.js dependencies
      working-directory: ./frontend
      run: npm ci

    - name: üß™ Run backend tests with coverage
      working-directory: ./backend/credit_management
      run: |
        pytest tests/ --cov=app --cov-report=xml

    - name: üìä SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # === DEPENDENCY ANALYSIS ===
  dependency-analysis:
    name: üì¶ Dependency Analysis
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîç Run FOSSA scan
      uses: fossas/fossa-action@main
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}

    - name: üìä Dependency Review
      uses: actions/dependency-review-action@v4
      if: github.event_name == 'pull_request'

  # === SUMMARY ===
  analysis-summary:
    name: üìã Analysis Summary
    runs-on: ubuntu-latest
    needs: [backend-analysis, frontend-analysis, security-analysis, code-quality]
    if: always()

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üìä Generate analysis summary
      run: |
        echo "## üîç Static Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Backend Analysis: ${{ needs.backend-analysis.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### Frontend Analysis: ${{ needs.frontend-analysis.result }}" >> $GITHUB_STEP_SUMMARY  
        echo "### Security Analysis: ${{ needs.security-analysis.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Checks performed:" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Code formatting (Black, Prettier)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Import organization (isort)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Linting (Pylint, ESLint, Flake8)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Type checking (MyPy, TypeScript)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Security scanning (Bandit, Trivy)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Dead code detection (Vulture)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Docstring validation (pydocstyle)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Dependency vulnerability checks" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Secret detection" >> $GITHUB_STEP_SUMMARY

    - name: ‚ùå Fail if any analysis failed
      if: |
        needs.backend-analysis.result == 'failure' ||
        needs.frontend-analysis.result == 'failure' ||
        needs.security-analysis.result == 'failure'
      run: |
        echo "‚ùå One or more static analysis checks failed!"
        exit 1

    - name: ‚úÖ All checks passed
      if: |
        needs.backend-analysis.result == 'success' &&
        needs.frontend-analysis.result == 'success' &&
        needs.security-analysis.result == 'success'
      run: |
        echo "‚úÖ All static analysis checks passed successfully!"
