# Pre-commit hooks configuration for PrevMora project
# Run 'pre-commit install' to activate hooks
# Documentation: https://pre-commit.com/

repos:
  # === GENERAL ===
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        description: "Remove trailing whitespace"
      - id: end-of-file-fixer
        description: "Ensure files end with newline"
      - id: check-yaml
        description: "Check YAML syntax"
      - id: check-json
        description: "Check JSON syntax"
      - id: check-toml
        description: "Check TOML syntax"
      - id: check-xml
        description: "Check XML syntax"
      - id: check-merge-conflict
        description: "Check for merge conflict markers"
      - id: check-case-conflict
        description: "Check for case conflicts"
      - id: check-symlinks
        description: "Check for broken symlinks"
      - id: check-executables-have-shebangs
        description: "Check that executables have shebangs"
      - id: mixed-line-ending
        description: "Check for mixed line endings"

  # === PYTHON BACKEND ===
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        name: "Black (Python formatter)"
        description: "Format Python code with Black"
        files: ^backend/.*\.py$
        language_version: python3.9

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: "isort (Import sorter)"
        description: "Sort Python imports"
        files: ^backend/.*\.py$
        args: ["--profile", "black"]

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        name: "Flake8 (Python linter)"
        description: "Lint Python code with Flake8"
        files: ^backend/.*\.py$
        additional_dependencies: [
          flake8-docstrings,
          flake8-import-order,
          flake8-bugbear,
          flake8-comprehensions,
          flake8-simplify,
        ]

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        name: "MyPy (Type checker)"
        description: "Type check Python code with MyPy"
        files: ^backend/.*\.py$
        additional_dependencies: [
          types-requests,
          types-setuptools,
          pydantic,
          fastapi,
          sqlalchemy,
        ]

  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: "Bandit (Security scanner)"
        description: "Scan Python code for security issues"
        files: ^backend/.*\.py$
        args: ["-c", "backend/credit_management/pyproject.toml"]
        exclude: ^backend/.*/tests/.*$

  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        name: "pydocstyle (Docstring checker)"
        description: "Check Python docstring conventions"
        files: ^backend/.*\.py$
        args: ["--convention=google"]
        exclude: ^backend/.*/tests/.*$

  - repo: https://github.com/jendrikseipp/vulture
    rev: v2.10
    hooks:
      - id: vulture
        name: "Vulture (Dead code finder)"
        description: "Find unused Python code"
        files: ^backend/.*\.py$
        exclude: ^backend/.*/tests/.*$

  # === FRONTEND ===
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        name: "Prettier (Frontend formatter)"
        description: "Format frontend code with Prettier"
        files: ^frontend/.*\.(ts|tsx|js|jsx|json|css|scss|md)$
        exclude: ^frontend/node_modules/.*$

  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.56.0
    hooks:
      - id: eslint
        name: "ESLint (Frontend linter)"
        description: "Lint frontend code with ESLint"
        files: ^frontend/.*\.(ts|tsx|js|jsx)$
        exclude: ^frontend/node_modules/.*$
        additional_dependencies:
          - eslint@^9.23.0
          - "@typescript-eslint/eslint-plugin@^6.21.0"
          - "@typescript-eslint/parser@^6.21.0"
          - "eslint-plugin-react@^7.33.2"
          - "eslint-plugin-react-hooks@^4.6.0"
          - "eslint-plugin-import@^2.29.1"
          - "eslint-plugin-jsx-a11y@^6.8.0"
          - "eslint-plugin-check-file@^3.1.0"

  # === SECURITY ===
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: "Detect Secrets"
        description: "Detect secrets in code"
        args: ["--baseline", ".secrets.baseline"]
        exclude: package-lock.json

  - repo: https://github.com/gitguardian/ggshield
    rev: v1.25.0
    hooks:
      - id: ggshield
        name: "GitGuardian (Secret scanner)"
        description: "Scan for secrets with GitGuardian"
        language: python
        stages: [commit]

  # === DOCUMENTATION ===
  - repo: https://github.com/executablebooks/mdformat
    rev: 0.7.17
    hooks:
      - id: mdformat
        name: "mdformat (Markdown formatter)"
        description: "Format Markdown files"
        files: \.md$
        exclude: ^docs/wiki/.*\.md$  # Exclude wiki docs to preserve formatting

  # === CUSTOM HOOKS ===
  - repo: local
    hooks:
      - id: backend-tests
        name: "Backend Tests"
        description: "Run backend tests"
        entry: bash -c 'cd backend/credit_management && python -m pytest tests/ --tb=short'
        language: system
        files: ^backend/.*\.py$
        pass_filenames: false
        stages: [pre-push]

      - id: frontend-type-check
        name: "Frontend Type Check"
        description: "Run TypeScript type checking"
        entry: bash -c 'cd frontend && npm run type-check'
        language: system
        files: ^frontend/.*\.(ts|tsx)$
        pass_filenames: false

      - id: dependency-check
        name: "Dependency Security Check"
        description: "Check for vulnerable dependencies"
        entry: bash -c 'cd backend/credit_management && safety check -r requirements.txt'
        language: system
        files: ^backend/credit_management/requirements\.txt$
        pass_filenames: false

      - id: frontend-security-audit
        name: "Frontend Security Audit"
        description: "Audit frontend dependencies for vulnerabilities"
        entry: bash -c 'cd frontend && npm audit --audit-level high'
        language: system
        files: ^frontend/package\.json$
        pass_filenames: false

# === CONFIGURATION ===
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: "3.0.0"

# === CI CONFIGURATION ===
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: [
    backend-tests,
    dependency-check,
    frontend-security-audit,
    ggshield
  ]
  submodules: false
