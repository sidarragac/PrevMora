#!/bin/bash

# Script para verificar est√°ndares de c√≥digo del proyecto PrevMora
# Ejecuta linters y verificaciones de tipo en backend y frontend

set -e  # Salir si alg√∫n comando falla

echo "üîç Verificando est√°ndares del proyecto PrevMora..."
echo "================================================"

# Variables para tracking de errores
BACKEND_ERRORS=0
FRONTEND_ERRORS=0

# Verificar que estamos en el directorio correcto
if [[ ! -f "README.md" ]] || [[ ! -d "backend" ]] || [[ ! -d "frontend" ]]; then
    echo "‚ùå Error: Ejecuta este script desde la ra√≠z del proyecto PrevMora"
    exit 1
fi

# Backend - Python/FastAPI
echo ""
echo "üì¶ Verificando backend (Python/FastAPI)..."
echo "--------------------------------------------"

if [[ -d "backend/credit_management" ]]; then
    cd backend/credit_management
    
    # Activar entorno virtual
    if [[ -d "venv" ]]; then
        source venv/bin/activate
    else
        echo "‚ùå Error: No se encontr√≥ entorno virtual en backend/credit_management/venv"
        BACKEND_ERRORS=1
    fi
    
    if [[ $BACKEND_ERRORS -eq 0 ]]; then
        # Verificar instalaci√≥n de herramientas
        echo "üì• Verificando herramientas de linting..."
        pip install pylint mypy pytest --quiet
        
        echo "üîç Ejecutando PyLint..."
        if pylint app/ --score=no; then
            echo "‚úÖ PyLint: Sin errores de estilo"
        else
            echo "‚ùå PyLint: Errores encontrados"
            BACKEND_ERRORS=1
        fi
        
        echo ""
        echo "üîç Ejecutando MyPy (verificaci√≥n de tipos)..."
        if mypy app/ --no-error-summary; then
            echo "‚úÖ MyPy: Sin errores de tipos"
        else
            echo "‚ùå MyPy: Errores de tipos encontrados"
            BACKEND_ERRORS=1
        fi
        
        echo ""
        echo "üß™ Ejecutando tests..."
        if pytest --quiet; then
            echo "‚úÖ Tests: Todos pasaron"
        else
            echo "‚ùå Tests: Algunos tests fallaron"
            BACKEND_ERRORS=1
        fi
    fi
    
    cd ../..
else
    echo "‚ö†Ô∏è  Directorio backend/credit_management no encontrado"
    BACKEND_ERRORS=1
fi

# Frontend - Next.js/TypeScript
echo ""
echo "üåê Verificando frontend (Next.js/TypeScript)..."
echo "------------------------------------------------"

if [[ -d "frontend" ]]; then
    cd frontend
    
    # Verificar node_modules
    if [[ ! -d "node_modules" ]]; then
        echo "üì• Instalando dependencias de npm..."
        npm install --silent
    fi
    
    echo "üîç Ejecutando ESLint..."
    if npm run lint --silent; then
        echo "‚úÖ ESLint: Sin errores de estilo"
    else
        echo "‚ùå ESLint: Errores encontrados"
        FRONTEND_ERRORS=1
    fi
    
    echo ""
    echo "üîç Ejecutando TypeScript compiler..."
    if npx tsc --noEmit --pretty; then
        echo "‚úÖ TypeScript: Sin errores de tipos"
    else
        echo "‚ùå TypeScript: Errores de tipos encontrados"
        FRONTEND_ERRORS=1
    fi
    
    # Verificar si existen tests
    if [[ -f "package.json" ]] && grep -q '"test"' package.json; then
        echo ""
        echo "üß™ Ejecutando tests..."
        if npm test --silent; then
            echo "‚úÖ Tests: Todos pasaron"
        else
            echo "‚ùå Tests: Algunos tests fallaron"
            FRONTEND_ERRORS=1
        fi
    else
        echo "‚ö†Ô∏è  No se encontraron scripts de test configurados"
    fi
    
    cd ..
else
    echo "‚ö†Ô∏è  Directorio frontend no encontrado"
    FRONTEND_ERRORS=1
fi

# Resumen final
echo ""
echo "üìä Resumen de Verificaci√≥n"
echo "=========================="

if [[ $BACKEND_ERRORS -eq 0 ]]; then
    echo "‚úÖ Backend: Todos los checks pasaron"
else
    echo "‚ùå Backend: Errores encontrados"
fi

if [[ $FRONTEND_ERRORS -eq 0 ]]; then
    echo "‚úÖ Frontend: Todos los checks pasaron"
else
    echo "‚ùå Frontend: Errores encontrados"
fi

# Determinar estado final
TOTAL_ERRORS=$((BACKEND_ERRORS + FRONTEND_ERRORS))

if [[ $TOTAL_ERRORS -eq 0 ]]; then
    echo ""
    echo "üéâ ¬°Verificaci√≥n completada exitosamente!"
    echo "El c√≥digo cumple con todos los est√°ndares."
    echo ""
    echo "üìã Listo para:"
    echo "  - Hacer commit"
    echo "  - Crear pull request"
    echo "  - Desplegar a producci√≥n"
    echo ""
    exit 0
else
    echo ""
    echo "‚ùå Verificaci√≥n fall√≥ con $TOTAL_ERRORS error(es)"
    echo "Por favor, revisa y corrige los errores antes de continuar."
    echo ""
    echo "üí° Sugerencias:"
    echo "  1. Ejecutar: ./scripts/format-all.sh"
    echo "  2. Revisar errores espec√≠ficos arriba"
    echo "  3. Ejecutar tests individuales para m√°s detalles"
    echo ""
    exit 1
fi
