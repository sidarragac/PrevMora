#!/bin/bash

# Script para verificar est√°ndares de c√≥digo del proyecto PrevMora
# Ejecuta linters y verificaciones de tipo en backend y frontend

set -e  # Salir si alg√∫n comando falla

echo "üîç Verificando est√°ndares del proyecto PrevMora..."
echo "================================================"

# Variables para tracking de errores
BACKEND_ERRORS=0
FRONTEND_ERRORS=0

# Verificar que estamos en el directorio correcto
if [[ ! -f "README.md" ]] || [[ ! -d "backend" ]] || [[ ! -d "frontend" ]]; then
    echo "‚ùå Error: Ejecuta este script desde la ra√≠z del proyecto PrevMora"
    exit 1
fi

# Backend - Python/FastAPI
echo ""
echo "üì¶ Verificando backend (Python/FastAPI)..."
echo "--------------------------------------------"

if [[ -d "backend/credit_management" ]]; then
    cd backend/credit_management
    
    # Activar entorno virtual
    if [[ -d "venv" ]]; then
        source venv/bin/activate
    else
        echo "‚ùå Error: No se encontr√≥ entorno virtual en backend/credit_management/venv"
        BACKEND_ERRORS=1
    fi
    
    if [[ $BACKEND_ERRORS -eq 0 ]]; then
        # Verificar instalaci√≥n de herramientas
        echo "üì• Verificando herramientas de an√°lisis est√°tico..."
        pip install pylint mypy pytest black isort flake8 bandit pydocstyle vulture safety --quiet
        
        echo "üé® Verificando formato con Black..."
        if black --check app/ scripts/ --quiet; then
            echo "‚úÖ Black: C√≥digo correctamente formateado"
        else
            echo "‚ùå Black: C√≥digo necesita formateo"
            BACKEND_ERRORS=1
        fi
        
        echo ""
        echo "üìë Verificando imports con isort..."
        if isort --check-only app/ scripts/ --quiet; then
            echo "‚úÖ isort: Imports correctamente organizados"
        else
            echo "‚ùå isort: Imports necesitan reorganizaci√≥n"
            BACKEND_ERRORS=1
        fi
        
        echo ""
        echo "üîç Ejecutando Flake8..."
        if flake8 app/ scripts/; then
            echo "‚úÖ Flake8: Sin errores de estilo"
        else
            echo "‚ùå Flake8: Errores de estilo encontrados"
            BACKEND_ERRORS=1
        fi
        
        echo ""
        echo "üîç Ejecutando PyLint..."
        if pylint app/ scripts/ --fail-under=8.0; then
            echo "‚úÖ PyLint: Calidad de c√≥digo satisfactoria (‚â•8.0)"
        else
            echo "‚ùå PyLint: Calidad de c√≥digo insuficiente (<8.0)"
            BACKEND_ERRORS=1
        fi
        
        echo ""
        echo "üè∑Ô∏è Verificando tipos con MyPy..."
        if mypy app/ --no-error-summary; then
            echo "‚úÖ MyPy: Sin errores de tipos"
        else
            echo "‚ùå MyPy: Errores de tipos encontrados"
            BACKEND_ERRORS=1
        fi
        
        echo ""
        echo "üîí Escaneando seguridad con Bandit..."
        if bandit -r app/ -q; then
            echo "‚úÖ Bandit: Sin vulnerabilidades de seguridad"
        else
            echo "‚ùå Bandit: Vulnerabilidades de seguridad encontradas"
            BACKEND_ERRORS=1
        fi
        
        echo ""
        echo "üìö Verificando docstrings con pydocstyle..."
        if pydocstyle app/ --convention=google; then
            echo "‚úÖ pydocstyle: Docstrings bien formateados"
        else
            echo "‚ö†Ô∏è pydocstyle: Algunos docstrings necesitan mejoras (no cr√≠tico)"
        fi
        
        echo ""
        echo "üßü Buscando c√≥digo muerto con Vulture..."
        if vulture app/ --min-confidence 60; then
            echo "‚úÖ Vulture: Sin c√≥digo muerto detectado"
        else
            echo "‚ö†Ô∏è Vulture: Posible c√≥digo muerto encontrado (revisar manualmente)"
        fi
        
        echo ""
        echo "üõ°Ô∏è Verificando dependencias con Safety..."
        if safety check -r requirements.txt; then
            echo "‚úÖ Safety: Sin vulnerabilidades en dependencias"
        else
            echo "‚ùå Safety: Vulnerabilidades en dependencias encontradas"
            BACKEND_ERRORS=1
        fi
        
        echo ""
        echo "üß™ Ejecutando tests..."
        if pytest --quiet; then
            echo "‚úÖ Tests: Todos pasaron"
        else
            echo "‚ùå Tests: Algunos tests fallaron"
            BACKEND_ERRORS=1
        fi
    fi
    
    cd ../..
else
    echo "‚ö†Ô∏è  Directorio backend/credit_management no encontrado"
    BACKEND_ERRORS=1
fi

# Frontend - Next.js/TypeScript
echo ""
echo "üåê Verificando frontend (Next.js/TypeScript)..."
echo "------------------------------------------------"

if [[ -d "frontend" ]]; then
    cd frontend
    
    # Verificar node_modules
    if [[ ! -d "node_modules" ]]; then
        echo "üì• Instalando dependencias de npm..."
        npm install --silent
    fi
    
    echo "üé® Verificando formato con Prettier..."
    if npm run format:check --silent; then
        echo "‚úÖ Prettier: C√≥digo correctamente formateado"
    else
        echo "‚ùå Prettier: C√≥digo necesita formateo"
        FRONTEND_ERRORS=1
    fi
    
    echo ""
    echo "üîç Ejecutando ESLint (modo estricto)..."
    if npm run lint:strict --silent; then
        echo "‚úÖ ESLint: Sin errores de estilo (0 warnings)"
    else
        echo "‚ùå ESLint: Errores o warnings encontrados"
        FRONTEND_ERRORS=1
    fi
    
    echo ""
    echo "üè∑Ô∏è Verificando tipos con TypeScript..."
    if npm run type-check --silent; then
        echo "‚úÖ TypeScript: Sin errores de tipos"
    else
        echo "‚ùå TypeScript: Errores de tipos encontrados"
        FRONTEND_ERRORS=1
    fi
    
    echo ""
    echo "üèóÔ∏è Verificando build..."
    if npm run build --silent; then
        echo "‚úÖ Build: Compilaci√≥n exitosa"
    else
        echo "‚ùå Build: Errores de compilaci√≥n"
        FRONTEND_ERRORS=1
    fi
    
    echo ""
    echo "üîí Auditoria de seguridad..."
    if npm run audit:security --silent; then
        echo "‚úÖ NPM Audit: Sin vulnerabilidades cr√≠ticas"
    else
        echo "‚ùå NPM Audit: Vulnerabilidades encontradas"
        FRONTEND_ERRORS=1
    fi
    
    echo ""
    echo "üì¶ Verificando dependencias obsoletas..."
    if npm run check-deps --silent; then
        echo "‚úÖ Dependencies: Todas actualizadas"
    else
        echo "‚ö†Ô∏è Dependencies: Algunas dependencias est√°n obsoletas (no cr√≠tico)"
    fi
    
    # Verificar si existen tests
    if [[ -f "package.json" ]] && grep -q '"test"' package.json; then
        echo ""
        echo "üß™ Ejecutando tests..."
        if npm test --silent; then
            echo "‚úÖ Tests: Todos pasaron"
        else
            echo "‚ùå Tests: Algunos tests fallaron"
            FRONTEND_ERRORS=1
        fi
    else
        echo "‚ö†Ô∏è  No se encontraron scripts de test configurados"
    fi
    
    cd ..
else
    echo "‚ö†Ô∏è  Directorio frontend no encontrado"
    FRONTEND_ERRORS=1
fi

# Resumen final
echo ""
echo "üìä Resumen de Verificaci√≥n"
echo "=========================="

if [[ $BACKEND_ERRORS -eq 0 ]]; then
    echo "‚úÖ Backend: Todos los checks pasaron"
else
    echo "‚ùå Backend: Errores encontrados"
fi

if [[ $FRONTEND_ERRORS -eq 0 ]]; then
    echo "‚úÖ Frontend: Todos los checks pasaron"
else
    echo "‚ùå Frontend: Errores encontrados"
fi

# Determinar estado final
TOTAL_ERRORS=$((BACKEND_ERRORS + FRONTEND_ERRORS))

if [[ $TOTAL_ERRORS -eq 0 ]]; then
    echo ""
    echo "üéâ ¬°Verificaci√≥n completada exitosamente!"
    echo "El c√≥digo cumple con todos los est√°ndares."
    echo ""
    echo "üìã Listo para:"
    echo "  - Hacer commit"
    echo "  - Crear pull request"
    echo "  - Desplegar a producci√≥n"
    echo ""
    exit 0
else
    echo ""
    echo "‚ùå Verificaci√≥n fall√≥ con $TOTAL_ERRORS error(es)"
    echo "Por favor, revisa y corrige los errores antes de continuar."
    echo ""
    echo "üí° Sugerencias:"
    echo "  1. Ejecutar: ./scripts/format-all.sh"
    echo "  2. Revisar errores espec√≠ficos arriba"
    echo "  3. Ejecutar tests individuales para m√°s detalles"
    echo ""
    exit 1
fi
